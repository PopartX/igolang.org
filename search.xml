<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>堡垒机jumpServer一键脚本</title>
      <link href="/2019/05/12/jumpserver/"/>
      <url>/2019/05/12/jumpserver/</url>
      
        <content type="html"><![CDATA[<h3 id="开源堡垒机一健脚本"><a href="#开源堡垒机一健脚本" class="headerlink" title="开源堡垒机一健脚本"></a>开源堡垒机一健脚本</h3><pre><code>echo -e &quot;\033[31m 1. 防火墙 Selinux 设置 \033[0m&quot; \&amp;&amp; if [ &quot;$(systemctl status firewalld | grep running)&quot; != &quot;&quot; ]; then firewall-cmd --zone=public --add-port=80/tcp --permanent; firewall-cmd --zone=public --add-port=2222/tcp --permanent; firewall-cmd --permanent --add-rich-rule=&quot;rule family=&quot;ipv4&quot; source address=&quot;192.168.11.110/24&quot; port protocol=&quot;tcp&quot; port=&quot;8080&quot; accept&quot;; firewall-cmd --reload; fi \&amp;&amp; if [ &quot;$(getenforce)&quot; != &quot;Disabled&quot; ]; then setsebool -P httpd_can_network_connect 1; fiecho -e &quot;\033[31m 2. 部署环境 \033[0m&quot; \&amp;&amp; yum update -y \&amp;&amp; ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \&amp;&amp; yum -y install kde-l10n-Chinese \&amp;&amp; yum -y reinstall glibc-common \&amp;&amp; localedef -c -f UTF-8 -i zh_CN zh_CN.UTF-8 \&amp;&amp; export LC_ALL=zh_CN.UTF-8 \&amp;&amp; echo &#39;LANG=&quot;zh_CN.UTF-8&quot;&#39; &gt; /etc/locale.conf \&amp;&amp; yum -y install wget gcc epel-release git \&amp;&amp; yum install -y yum-utils device-mapper-persistent-data lvm2 \&amp;&amp; yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo \&amp;&amp; yum makecache fast \&amp;&amp; rpm --import https://mirrors.aliyun.com/docker-ce/linux/centos/gpg \&amp;&amp; echo -e &quot;[nginx-stable]\nname=nginx stable repo\nbaseurl=http://nginx.org/packages/centos/\$releasever/\$basearch/\ngpgcheck=1\nenabled=1\ngpgkey=https://nginx.org/keys/nginx_signing.key&quot; &gt; /etc/yum.repos.d/nginx.repo \&amp;&amp; rpm --import https://nginx.org/keys/nginx_signing.key \&amp;&amp; yum -y install redis mariadb mariadb-devel mariadb-server nginx docker-ce \&amp;&amp; systemctl enable redis mariadb nginx docker \&amp;&amp; systemctl start redis mariadb \&amp;&amp; yum -y install python36 python36-devel \&amp;&amp; python3.6 -m venv /opt/py3echo -e &quot;\033[31m 3. 下载组件 \033[0m&quot; \&amp;&amp; cd /opt \&amp;&amp; if [ ! -d &quot;/opt/jumpserver&quot; ]; then git clone https://github.com/jumpserver/jumpserver.git; fi \&amp;&amp; if [ ! -f &quot;/opt/luna.tar.gz&quot; ]; then wget https://demo.jumpserver.org/download/luna/1.4.9/luna.tar.gz; tar xf luna.tar.gz; chown -R root:root luna; fi \&amp;&amp; yum -y install $(cat /opt/jumpserver/requirements/rpm_requirements.txt) \&amp;&amp; source /opt/py3/bin/activate \&amp;&amp; pip install --upgrade pip setuptools -i https://mirrors.aliyun.com/pypi/simple/ \&amp;&amp; pip install -r /opt/jumpserver/requirements/requirements.txt -i https://mirrors.aliyun.com/pypi/simple/ \&amp;&amp; curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://f1361db2.m.daocloud.io \&amp;&amp; systemctl restart docker \&amp;&amp; docker pull jumpserver/jms_coco:1.4.9 \&amp;&amp; docker pull jumpserver/jms_guacamole:1.4.9 \&amp;&amp; rm -rf /etc/nginx/conf.d/default.confecho -e &quot;\033[31m 4. 配置nginx \033[0m&quot; \&amp;&amp; cat &lt;&lt; EOF &gt; /etc/nginx/conf.d/jumpserver.confserver {    listen 80;    client_max_body_size 100m;  # 录像及文件上传大小限制    location /luna/ {        try_files \$uri / /index.html;        alias /opt/luna/;    }    location /media/ {        add_header Content-Encoding gzip;        root /opt/jumpserver/data/;    }    location /static/ {        root /opt/jumpserver/data/;    }    location /socket.io/ {        proxy_pass       http://localhost:5000/socket.io/;        proxy_buffering off;        proxy_http_version 1.1;        proxy_set_header Upgrade \$http_upgrade;        proxy_set_header Connection &quot;upgrade&quot;;        proxy_set_header X-Real-IP \$remote_addr;        proxy_set_header Host \$host;        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;        access_log off;    }    location /coco/ {        proxy_pass       http://localhost:5000/coco/;        proxy_set_header X-Real-IP \$remote_addr;        proxy_set_header Host \$host;        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;        access_log off;    }    location /guacamole/ {        proxy_pass       http://localhost:8081/;        proxy_buffering off;        proxy_http_version 1.1;        proxy_set_header Upgrade \$http_upgrade;        proxy_set_header Connection \$http_connection;        proxy_set_header X-Real-IP \$remote_addr;        proxy_set_header Host \$host;        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;        access_log off;    }    location / {        proxy_pass http://localhost:8080;        proxy_set_header X-Real-IP \$remote_addr;        proxy_set_header Host \$host;        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;    }}EOFecho -e &quot;\033[31m 5. 处理配置文件 \033[0m&quot; \&amp;&amp; if [ &quot;$DB_PASSWORD&quot; = &quot;&quot; ]; then DB_PASSWORD=`cat /dev/urandom | tr -dc A-Za-z0-9 | head -c 24`; fi \&amp;&amp; if [ &quot;$SECRET_KEY&quot; = &quot;&quot; ]; then SECRET_KEY=`cat /dev/urandom | tr -dc A-Za-z0-9 | head -c 50`; echo &quot;SECRET_KEY=$SECRET_KEY&quot; &gt;&gt; ~/.bashrc; fi \&amp;&amp; if [ &quot;$BOOTSTRAP_TOKEN&quot; = &quot;&quot; ]; then BOOTSTRAP_TOKEN=`cat /dev/urandom | tr -dc A-Za-z0-9 | head -c 16`; echo &quot;BOOTSTRAP_TOKEN=$BOOTSTRAP_TOKEN&quot; &gt;&gt; ~/.bashrc; fi \&amp;&amp; if [ &quot;$Server_IP&quot; = &quot;&quot; ]; then Server_IP=`ip addr | grep inet | egrep -v &#39;(127.0.0.1|inet6|docker)&#39; | awk &#39;{print $2}&#39; | tr -d &quot;addr:&quot; | head -n 1 | cut -d / -f1`; fi \&amp;&amp; if [ ! -d &quot;/var/lib/mysql/jumpserver&quot; ]; then mysql -uroot -e &quot;create database jumpserver default charset &#39;utf8&#39;;grant all on jumpserver.* to &#39;jumpserver&#39;@&#39;127.0.0.1&#39; identified by &#39;$DB_PASSWORD&#39;;flush privileges;&quot;; fi \&amp;&amp; if [ ! -f &quot;/opt/jumpserver/config.yml&quot; ]; then cp /opt/jumpserver/config_example.yml /opt/jumpserver/config.yml; sed -i &quot;s/SECRET_KEY:/SECRET_KEY: $SECRET_KEY/g&quot; /opt/jumpserver/config.yml; sed -i &quot;s/BOOTSTRAP_TOKEN:/BOOTSTRAP_TOKEN: $BOOTSTRAP_TOKEN/g&quot; /opt/jumpserver/config.yml; sed -i &quot;s/# DEBUG: true/DEBUG: false/g&quot; /opt/jumpserver/config.yml; sed -i &quot;s/# LOG_LEVEL: DEBUG/LOG_LEVEL: ERROR/g&quot; /opt/jumpserver/config.yml; sed -i &quot;s/# SESSION_EXPIRE_AT_BROWSER_CLOSE: false/SESSION_EXPIRE_AT_BROWSER_CLOSE: true/g&quot; /opt/jumpserver/config.yml; sed -i &quot;s/DB_PASSWORD: /DB_PASSWORD: $DB_PASSWORD/g&quot; /opt/jumpserver/config.yml; fiecho -e &quot;\033[31m 6. 启动 Jumpserver \033[0m&quot; \&amp;&amp; systemctl start nginx \&amp;&amp; cd /opt/jumpserver \&amp;&amp; ./jms start all -d \&amp;&amp; docker run --name jms_coco -d -p 2222:2222 -p 5000:5000 -e CORE_HOST=http://$Server_IP:8080 -e BOOTSTRAP_TOKEN=$BOOTSTRAP_TOKEN jumpserver/jms_coco:1.4.9 \&amp;&amp; docker run --name jms_guacamole -d -p 8081:8081 -e JUMPSERVER_SERVER=http://$Server_IP:8080 -e BOOTSTRAP_TOKEN=$BOOTSTRAP_TOKEN jumpserver/jms_guacamole:1.4.9 \&amp;&amp; echo -e &quot;\033[31m 你的数据库密码是 $DB_PASSWORD \033[0m&quot; \&amp;&amp; echo -e &quot;\033[31m 你的SECRET_KEY是 $SECRET_KEY \033[0m&quot; \&amp;&amp; echo -e &quot;\033[31m 你的BOOTSTRAP_TOKEN是 $BOOTSTRAP_TOKEN \033[0m&quot; \&amp;&amp; echo -e &quot;\033[31m 你的服务器IP是 $Server_IP \033[0m&quot; \&amp;&amp; echo -e &quot;\033[31m 请打开浏览器访问 http://$Server_IP 用户名:admin 密码:admin \033[0m&quot;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/05/12/hello-world/"/>
      <url>/2019/05/12/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
